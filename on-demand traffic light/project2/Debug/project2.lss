
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002361  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b89  00000000  00000000  00002d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000123b  00000000  00000000  0000390e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00004b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098f  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e7  00000000  00000000  000059bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00006da2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_1>
   8:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_2>
   c:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 94 01 	call	0x328	; 0x328 <main>
  74:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Normal_mode>:
	
	TIMER0_INIT(TIMER0_Normal_Mode,TIMER0_Prescaler_1024,OC0_DISCONNECTED);
	
	sei();
	EXTI_TriggerEdge(EX_INT0,RISING_EDGE);
	EXTI_ENABLE(EX_INT0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
  84:	0e 94 46 03 	call	0x68c	; 0x68c <TIMER0_delay_5s>
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
  90:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  94:	0b c0       	rjmp	.+22     	; 0xac <Normal_mode+0x30>
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_TOGGLE>
  9e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TIMER0_delay_250ms>
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	84 31       	cpi	r24, 0x14	; 20
  b2:	88 f3       	brcs	.-30     	; 0x96 <Normal_mode+0x1a>
  b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
  c0:	0e 94 46 03 	call	0x68c	; 0x68c <TIMER0_delay_5s>
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <Normal_mode+0x68>
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_TOGGLE>
  d6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TIMER0_delay_250ms>
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	84 31       	cpi	r24, 0x14	; 20
  ea:	88 f3       	brcs	.-30     	; 0xce <Normal_mode+0x52>
  ec:	08 95       	ret

000000ee <Pedestrian_mode>:
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_GetPinValue_int>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	99 f4       	brne	.+38     	; 0x120 <Pedestrian_mode+0x32>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 10a:	65 e0       	ldi	r22, 0x05	; 5
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 112:	0e 94 46 03 	call	0x68c	; 0x68c <TIMER0_delay_5s>
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 11e:	42 c0       	rjmp	.+132    	; 0x1a4 <Pedestrian_mode+0xb6>
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_GetPinValue_int>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	31 f0       	breq	.+12     	; 0x138 <Pedestrian_mode+0x4a>
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_GetPinValue_int>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	b1 f5       	brne	.+108    	; 0x1a4 <Pedestrian_mode+0xb6>
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 140:	67 e0       	ldi	r22, 0x07	; 7
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 148:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TIMER0_delay_250ms>
 14c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	13 c0       	rjmp	.+38     	; 0x178 <Pedestrian_mode+0x8a>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_TOGGLE>
 162:	66 e0       	ldi	r22, 0x06	; 6
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_TOGGLE>
 16a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TIMER0_delay_250ms>
 16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 178:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	84 31       	cpi	r24, 0x14	; 20
 17e:	48 f3       	brcs	.-46     	; 0x152 <Pedestrian_mode+0x64>
 180:	67 e0       	ldi	r22, 0x07	; 7
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 190:	65 e0       	ldi	r22, 0x05	; 5
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 198:	0e 94 46 03 	call	0x68c	; 0x68c <TIMER0_delay_5s>
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 1a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <Pedestrian_mode+0xda>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_TOGGLE>
 1b2:	66 e0       	ldi	r22, 0x06	; 6
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_TOGGLE>
 1ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TIMER0_delay_250ms>
 1be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1cc:	84 31       	cpi	r24, 0x14	; 20
 1ce:	68 f3       	brcs	.-38     	; 0x1aa <Pedestrian_mode+0xbc>
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 1e0:	67 e0       	ldi	r22, 0x07	; 7
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 1e8:	0e 94 46 03 	call	0x68c	; 0x68c <TIMER0_delay_5s>
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
 1f4:	08 95       	ret

000001f6 <__vector_1>:
	//EXTI_SetCallBack(EX_INT0,Pedestrian_mode);
}

ISR(INT0_VEC)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	if (BUTTON_READ(BUTTON_PORT,BUTTON_PIN)==Pressed)
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	0e 94 82 01 	call	0x304	; 0x304 <BUTTON_READ>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	11 f4       	brne	.+4      	; 0x228 <__vector_1+0x32>
	{
		Pedestrian_mode();
 224:	0e 94 77 00 	call	0xee	; 0xee <Pedestrian_mode>
	}
	Normal_mode();
 228:	0e 94 3e 00 	call	0x7c	; 0x7c <Normal_mode>
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <App_Init>:
		LED_ON(Leds_Port,i);
		_delay_ms(150);
	}
	LED_OFF_Port(Leds_Port);
	_delay_ms(150);
}
 24e:	0e 94 90 01 	call	0x320	; 0x320 <LED_INIT_Port>
 252:	08 95       	ret

00000254 <Converging_Diverging>:

void Converging_Diverging(PORT_ID Leds_Port)
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	18 2f       	mov	r17, r24
	uint8 i=0,j=7;
 25c:	c7 e0       	ldi	r28, 0x07	; 7
 25e:	d0 e0       	ldi	r29, 0x00	; 0
	while((i<=3),(j>=4))
 260:	1b c0       	rjmp	.+54     	; 0x298 <Converging_Diverging+0x44>
	{
		LED_ON(Leds_Port,i);
 262:	6d 2f       	mov	r22, r29
 264:	81 2f       	mov	r24, r17
 266:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
		LED_ON(Leds_Port,j);
 26a:	6c 2f       	mov	r22, r28
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f e7       	ldi	r18, 0x7F	; 127
 274:	8a e1       	ldi	r24, 0x1A	; 26
 276:	96 e0       	ldi	r25, 0x06	; 6
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <Converging_Diverging+0x24>
 280:	00 c0       	rjmp	.+0      	; 0x282 <Converging_Diverging+0x2e>
 282:	00 00       	nop
		_delay_ms(250);
		LED_OFF(Leds_Port,i);
 284:	6d 2f       	mov	r22, r29
 286:	81 2f       	mov	r24, r17
 288:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
		LED_OFF(Leds_Port,j);
 28c:	6c 2f       	mov	r22, r28
 28e:	81 2f       	mov	r24, r17
 290:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
		i++;
 294:	df 5f       	subi	r29, 0xFF	; 255
		j--;
 296:	c1 50       	subi	r28, 0x01	; 1
}

void Converging_Diverging(PORT_ID Leds_Port)
{
	uint8 i=0,j=7;
	while((i<=3),(j>=4))
 298:	c4 30       	cpi	r28, 0x04	; 4
 29a:	18 f7       	brcc	.-58     	; 0x262 <Converging_Diverging+0xe>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	80 e7       	ldi	r24, 0x70	; 112
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <Converging_Diverging+0x4e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <Converging_Diverging+0x58>
 2ac:	00 00       	nop
 2ae:	1b c0       	rjmp	.+54     	; 0x2e6 <Converging_Diverging+0x92>
		j--;
	}
	_delay_ms(100);
	while((i>=0),(j<=7))
	{
		LED_ON(Leds_Port,i);
 2b0:	6d 2f       	mov	r22, r29
 2b2:	81 2f       	mov	r24, r17
 2b4:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
		LED_ON(Leds_Port,j);
 2b8:	6c 2f       	mov	r22, r28
 2ba:	81 2f       	mov	r24, r17
 2bc:	0e 94 85 01 	call	0x30a	; 0x30a <LED_ON>
 2c0:	2f e7       	ldi	r18, 0x7F	; 127
 2c2:	8a e1       	ldi	r24, 0x1A	; 26
 2c4:	96 e0       	ldi	r25, 0x06	; 6
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <Converging_Diverging+0x72>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <Converging_Diverging+0x7c>
 2d0:	00 00       	nop
		_delay_ms(250);
		LED_OFF(Leds_Port,i);
 2d2:	6d 2f       	mov	r22, r29
 2d4:	81 2f       	mov	r24, r17
 2d6:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
		LED_OFF(Leds_Port,j);
 2da:	6c 2f       	mov	r22, r28
 2dc:	81 2f       	mov	r24, r17
 2de:	0e 94 89 01 	call	0x312	; 0x312 <LED_OFF>
		i--;
 2e2:	d1 50       	subi	r29, 0x01	; 1
		j++;
 2e4:	cf 5f       	subi	r28, 0xFF	; 255
		LED_OFF(Leds_Port,j);
		i++;
		j--;
	}
	_delay_ms(100);
	while((i>=0),(j<=7))
 2e6:	c8 30       	cpi	r28, 0x08	; 8
 2e8:	18 f3       	brcs	.-58     	; 0x2b0 <Converging_Diverging+0x5c>
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	80 e7       	ldi	r24, 0x70	; 112
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <Converging_Diverging+0x9c>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Converging_Diverging+0xa6>
 2fa:	00 00       	nop
		LED_OFF(Leds_Port,j);
		i--;
		j++;
	}
	_delay_ms(100);
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	08 95       	ret

00000304 <BUTTON_READ>:
}

BUTTON_STATE BUTTON_READ(PORT_ID PortNumber,PIN_ID PinNumber)
{
	uint8 ButtonState=0;
	ButtonState=DIO_GetPinValue_int(PortNumber,PinNumber);
 304:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_GetPinValue_int>
	return ButtonState;
}
 308:	08 95       	ret

0000030a <LED_ON>:
	DIO_SetPinDirection_v(PortNumber,PinNumber,OUTPUT);
}

void LED_ON(PORT_ID PortNumber,PIN_ID PinNumber)
{
	DIO_SetPinValue_v(PortNumber,PinNumber,HIGH);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_SetPinValue_v>
 310:	08 95       	ret

00000312 <LED_OFF>:
}

void LED_OFF(PORT_ID PortNumber,PIN_ID PinNumber)
{
	DIO_SetPinValue_v(PortNumber,PinNumber,LOW);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_SetPinValue_v>
 318:	08 95       	ret

0000031a <LED_TOGGLE>:
}

void LED_TOGGLE(PORT_ID PortNumber,PIN_ID PinNumber)
{
	DIO_TogglePin_v(PortNumber,PinNumber);
 31a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_TogglePin_v>
 31e:	08 95       	ret

00000320 <LED_INIT_Port>:
}

void LED_INIT_Port(PORT_ID PortNumber)
{
	DIO_SetPortDirection_v(PortNumber,OUTPUT);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetPortDirection_v>
 326:	08 95       	ret

00000328 <main>:
#include "APP/application.h"


/**/int main(void)
{
	App_Init(PORTA);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 27 01 	call	0x24e	; 0x24e <App_Init>
		//Shift_Right(PORTA);
		//Converging(PORTA);
		//Diverging(PORTA);
		//Pingpong(PORTA);
		//Snake(PORTA);
		Converging_Diverging(PORTA);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 2a 01 	call	0x254	; 0x254 <Converging_Diverging>
 334:	fc cf       	rjmp	.-8      	; 0x32e <main+0x6>

00000336 <DIO_SetPortDirection_v>:
		switch(PortNumber)
		{
			case PORTA : CLR_BIT(DDRA_REG,PinNumber);break;
			case PORTB : CLR_BIT(DDRB_REG,PinNumber);break;
			case PORTC : CLR_BIT(DDRC_REG,PinNumber);break;
			case PORTD : CLR_BIT(DDRD_REG,PinNumber);break;
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	c1 f4       	brne	.+48     	; 0x36a <DIO_SetPortDirection_v+0x34>
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	51 f0       	breq	.+20     	; 0x352 <DIO_SetPortDirection_v+0x1c>
 33e:	28 f0       	brcs	.+10     	; 0x34a <DIO_SetPortDirection_v+0x14>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	59 f0       	breq	.+22     	; 0x35a <DIO_SetPortDirection_v+0x24>
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	69 f0       	breq	.+26     	; 0x362 <DIO_SetPortDirection_v+0x2c>
 348:	08 95       	ret
 34a:	8a b3       	in	r24, 0x1a	; 26
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	8a bb       	out	0x1a, r24	; 26
 350:	08 95       	ret
 352:	87 b3       	in	r24, 0x17	; 23
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	87 bb       	out	0x17, r24	; 23
 358:	08 95       	ret
 35a:	84 b3       	in	r24, 0x14	; 20
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	84 bb       	out	0x14, r24	; 20
 360:	08 95       	ret
 362:	81 b3       	in	r24, 0x11	; 17
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	81 bb       	out	0x11, r24	; 17
 368:	08 95       	ret
 36a:	61 11       	cpse	r22, r1
 36c:	13 c0       	rjmp	.+38     	; 0x394 <DIO_SetPortDirection_v+0x5e>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	49 f0       	breq	.+18     	; 0x384 <DIO_SetPortDirection_v+0x4e>
 372:	28 f0       	brcs	.+10     	; 0x37e <DIO_SetPortDirection_v+0x48>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	49 f0       	breq	.+18     	; 0x38a <DIO_SetPortDirection_v+0x54>
 378:	83 30       	cpi	r24, 0x03	; 3
 37a:	51 f0       	breq	.+20     	; 0x390 <DIO_SetPortDirection_v+0x5a>
 37c:	08 95       	ret
 37e:	8a b3       	in	r24, 0x1a	; 26
 380:	1a ba       	out	0x1a, r1	; 26
 382:	08 95       	ret
 384:	87 b3       	in	r24, 0x17	; 23
 386:	17 ba       	out	0x17, r1	; 23
 388:	08 95       	ret
 38a:	84 b3       	in	r24, 0x14	; 20
 38c:	14 ba       	out	0x14, r1	; 20
 38e:	08 95       	ret
 390:	81 b3       	in	r24, 0x11	; 17
 392:	11 ba       	out	0x11, r1	; 17
 394:	08 95       	ret

00000396 <DIO_SetPinValue_v>:
	}
}

void DIO_SetPinValue_v(PORT_ID PortNumber,PIN_ID PinNumber,DIO_VALUE value)
{
	if(value == HIGH)
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	a1 f5       	brne	.+104    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	{
		switch(PortNumber)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	89 f0       	breq	.+34     	; 0x3c0 <DIO_SetPinValue_v+0x2a>
 39e:	28 f0       	brcs	.+10     	; 0x3aa <DIO_SetPinValue_v+0x14>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	c9 f0       	breq	.+50     	; 0x3d6 <DIO_SetPinValue_v+0x40>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	11 f1       	breq	.+68     	; 0x3ec <DIO_SetPinValue_v+0x56>
 3a8:	08 95       	ret
		{
			case PORTA : SET_BIT(PORTA_REG,PinNumber);break;
 3aa:	2b b3       	in	r18, 0x1b	; 27
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPinValue_v+0x20>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPinValue_v+0x1c>
 3ba:	82 2b       	or	r24, r18
 3bc:	8b bb       	out	0x1b, r24	; 27
 3be:	08 95       	ret
			case PORTB : SET_BIT(PORTB_REG,PinNumber);break;
 3c0:	28 b3       	in	r18, 0x18	; 24
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinValue_v+0x36>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinValue_v+0x32>
 3d0:	82 2b       	or	r24, r18
 3d2:	88 bb       	out	0x18, r24	; 24
 3d4:	08 95       	ret
			case PORTC : SET_BIT(PORTC_REG,PinNumber);break;
 3d6:	25 b3       	in	r18, 0x15	; 21
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPinValue_v+0x4c>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPinValue_v+0x48>
 3e6:	82 2b       	or	r24, r18
 3e8:	85 bb       	out	0x15, r24	; 21
 3ea:	08 95       	ret
			case PORTD : SET_BIT(PORTD_REG,PinNumber);break;
 3ec:	22 b3       	in	r18, 0x12	; 18
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_SetPinValue_v+0x62>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_SetPinValue_v+0x5e>
 3fc:	82 2b       	or	r24, r18
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	08 95       	ret
		}
	}
	else if(value == LOW)
 402:	41 11       	cpse	r20, r1
 404:	37 c0       	rjmp	.+110    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	{
		switch(PortNumber)
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	91 f0       	breq	.+36     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 40a:	28 f0       	brcs	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	d9 f0       	breq	.+54     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	29 f1       	breq	.+74     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 414:	08 95       	ret
		{
			case PORTA : CLR_BIT(PORTA_REG,PinNumber);break;
 416:	2b b3       	in	r18, 0x1b	; 27
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	80 95       	com	r24
 428:	82 23       	and	r24, r18
 42a:	8b bb       	out	0x1b, r24	; 27
 42c:	08 95       	ret
			case PORTB : CLR_BIT(PORTB_REG,PinNumber);break;
 42e:	28 b3       	in	r18, 0x18	; 24
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	88 bb       	out	0x18, r24	; 24
 444:	08 95       	ret
			case PORTC : CLR_BIT(PORTC_REG,PinNumber);break;
 446:	25 b3       	in	r18, 0x15	; 21
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	80 95       	com	r24
 458:	82 23       	and	r24, r18
 45a:	85 bb       	out	0x15, r24	; 21
 45c:	08 95       	ret
			case PORTD : CLR_BIT(PORTD_REG,PinNumber);break;
 45e:	22 b3       	in	r18, 0x12	; 18
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	82 bb       	out	0x12, r24	; 18
 474:	08 95       	ret

00000476 <DIO_GetPinValue_int>:
}

DIO_VALUE DIO_GetPinValue_int(PORT_ID PortNumber,PIN_ID PinNumber)
{
	DIO_VALUE PinValue=0;
	switch(PortNumber)
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	79 f0       	breq	.+30     	; 0x498 <DIO_GetPinValue_int+0x22>
 47a:	28 f0       	brcs	.+10     	; 0x486 <DIO_GetPinValue_int+0x10>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	a9 f0       	breq	.+42     	; 0x4aa <DIO_GetPinValue_int+0x34>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	e1 f0       	breq	.+56     	; 0x4bc <DIO_GetPinValue_int+0x46>
 484:	24 c0       	rjmp	.+72     	; 0x4ce <DIO_GetPinValue_int+0x58>
	{
		case PORTA : PinValue=GET_BIT(PINA_REG,PinNumber);break;
 486:	89 b3       	in	r24, 0x19	; 25
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_GetPinValue_int+0x1a>
 48c:	95 95       	asr	r25
 48e:	87 95       	ror	r24
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_GetPinValue_int+0x16>
 494:	81 70       	andi	r24, 0x01	; 1
 496:	08 95       	ret
		case PORTB : PinValue=GET_BIT(PINB_REG,PinNumber);break;
 498:	86 b3       	in	r24, 0x16	; 22
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_GetPinValue_int+0x2c>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_GetPinValue_int+0x28>
 4a6:	81 70       	andi	r24, 0x01	; 1
 4a8:	08 95       	ret
		case PORTC : PinValue=GET_BIT(PINC_REG,PinNumber);break;
 4aa:	83 b3       	in	r24, 0x13	; 19
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_GetPinValue_int+0x3e>
 4b0:	95 95       	asr	r25
 4b2:	87 95       	ror	r24
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_GetPinValue_int+0x3a>
 4b8:	81 70       	andi	r24, 0x01	; 1
 4ba:	08 95       	ret
		case PORTD : PinValue=GET_BIT(PIND_REG,PinNumber);break;
 4bc:	80 b3       	in	r24, 0x10	; 16
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_GetPinValue_int+0x50>
 4c2:	95 95       	asr	r25
 4c4:	87 95       	ror	r24
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_GetPinValue_int+0x4c>
 4ca:	81 70       	andi	r24, 0x01	; 1
 4cc:	08 95       	ret
	}
}

DIO_VALUE DIO_GetPinValue_int(PORT_ID PortNumber,PIN_ID PinNumber)
{
	DIO_VALUE PinValue=0;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
		case PORTB : PinValue=GET_BIT(PINB_REG,PinNumber);break;
		case PORTC : PinValue=GET_BIT(PINC_REG,PinNumber);break;
		case PORTD : PinValue=GET_BIT(PIND_REG,PinNumber);break;
	}
	return PinValue;
}
 4d0:	08 95       	ret

000004d2 <DIO_TogglePin_v>:

void DIO_TogglePin_v(PORT_ID PortNumber,PIN_ID PinNumber)
{
	switch(PortNumber)
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	89 f0       	breq	.+34     	; 0x4f8 <DIO_TogglePin_v+0x26>
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <DIO_TogglePin_v+0x10>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	c9 f0       	breq	.+50     	; 0x50e <DIO_TogglePin_v+0x3c>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	11 f1       	breq	.+68     	; 0x524 <DIO_TogglePin_v+0x52>
 4e0:	08 95       	ret
	{
		case PORTA : TOG_BIT(PORTA_REG,PinNumber);break;
 4e2:	2b b3       	in	r18, 0x1b	; 27
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_TogglePin_v+0x1c>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_TogglePin_v+0x18>
 4f2:	82 27       	eor	r24, r18
 4f4:	8b bb       	out	0x1b, r24	; 27
 4f6:	08 95       	ret
		case PORTB : TOG_BIT(PORTB_REG,PinNumber);break;
 4f8:	28 b3       	in	r18, 0x18	; 24
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_TogglePin_v+0x32>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_TogglePin_v+0x2e>
 508:	82 27       	eor	r24, r18
 50a:	88 bb       	out	0x18, r24	; 24
 50c:	08 95       	ret
		case PORTC : TOG_BIT(PORTC_REG,PinNumber);break;
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_TogglePin_v+0x48>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_TogglePin_v+0x44>
 51e:	82 27       	eor	r24, r18
 520:	85 bb       	out	0x15, r24	; 21
 522:	08 95       	ret
		case PORTD : TOG_BIT(PORTD_REG,PinNumber);break;
 524:	22 b3       	in	r18, 0x12	; 18
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_TogglePin_v+0x5e>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_TogglePin_v+0x5a>
 534:	82 27       	eor	r24, r18
 536:	82 bb       	out	0x12, r24	; 18
 538:	08 95       	ret

0000053a <__vector_2>:
	{
		INT0_Fptr();
	}
}*/
ISR(INT1_VEC)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 55c:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <INT1_Fptr>
 560:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <INT1_Fptr+0x1>
 564:	30 97       	sbiw	r30, 0x00	; 0
 566:	09 f0       	breq	.+2      	; 0x56a <__vector_2+0x30>
	{
		INT1_Fptr();
 568:	09 95       	icall
	}
}
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__vector_3>:
ISR(INT2_VEC)
{
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 5ae:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <INT2_Fptr>
 5b2:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <INT2_Fptr+0x1>
 5b6:	30 97       	sbiw	r30, 0x00	; 0
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__vector_3+0x30>
	{
		INT2_Fptr();
 5ba:	09 95       	icall
	}
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <TIMER0_INIT>:
		while(GET_BIT(TIFR_REG,TOV0)==0);
		SET_BIT(TIFR_REG,TOV0);
		OV_counter++;
	}
	OV_counter = 0;
	TIMER0_Stop();
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	69 f0       	breq	.+26     	; 0x5fc <TIMER0_INIT+0x1e>
 5e2:	28 f0       	brcs	.+10     	; 0x5ee <TIMER0_INIT+0x10>
 5e4:	82 30       	cpi	r24, 0x02	; 2
 5e6:	89 f0       	breq	.+34     	; 0x60a <TIMER0_INIT+0x2c>
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	b1 f0       	breq	.+44     	; 0x618 <TIMER0_INIT+0x3a>
 5ec:	1b c0       	rjmp	.+54     	; 0x624 <TIMER0_INIT+0x46>
 5ee:	83 b7       	in	r24, 0x33	; 51
 5f0:	8f 7b       	andi	r24, 0xBF	; 191
 5f2:	83 bf       	out	0x33, r24	; 51
 5f4:	83 b7       	in	r24, 0x33	; 51
 5f6:	87 7f       	andi	r24, 0xF7	; 247
 5f8:	83 bf       	out	0x33, r24	; 51
 5fa:	14 c0       	rjmp	.+40     	; 0x624 <TIMER0_INIT+0x46>
 5fc:	83 b7       	in	r24, 0x33	; 51
 5fe:	80 64       	ori	r24, 0x40	; 64
 600:	83 bf       	out	0x33, r24	; 51
 602:	83 b7       	in	r24, 0x33	; 51
 604:	87 7f       	andi	r24, 0xF7	; 247
 606:	83 bf       	out	0x33, r24	; 51
 608:	0d c0       	rjmp	.+26     	; 0x624 <TIMER0_INIT+0x46>
 60a:	83 b7       	in	r24, 0x33	; 51
 60c:	8f 7b       	andi	r24, 0xBF	; 191
 60e:	83 bf       	out	0x33, r24	; 51
 610:	83 b7       	in	r24, 0x33	; 51
 612:	88 60       	ori	r24, 0x08	; 8
 614:	83 bf       	out	0x33, r24	; 51
 616:	06 c0       	rjmp	.+12     	; 0x624 <TIMER0_INIT+0x46>
 618:	83 b7       	in	r24, 0x33	; 51
 61a:	80 64       	ori	r24, 0x40	; 64
 61c:	83 bf       	out	0x33, r24	; 51
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	88 60       	ori	r24, 0x08	; 8
 622:	83 bf       	out	0x33, r24	; 51
 624:	83 b7       	in	r24, 0x33	; 51
 626:	8e 7f       	andi	r24, 0xFE	; 254
 628:	83 bf       	out	0x33, r24	; 51
 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	8d 7f       	andi	r24, 0xFD	; 253
 62e:	83 bf       	out	0x33, r24	; 51
 630:	83 b7       	in	r24, 0x33	; 51
 632:	8b 7f       	andi	r24, 0xFB	; 251
 634:	83 bf       	out	0x33, r24	; 51
 636:	83 b7       	in	r24, 0x33	; 51
 638:	68 2b       	or	r22, r24
 63a:	63 bf       	out	0x33, r22	; 51
 63c:	41 30       	cpi	r20, 0x01	; 1
 63e:	69 f0       	breq	.+26     	; 0x65a <TIMER0_INIT+0x7c>
 640:	28 f0       	brcs	.+10     	; 0x64c <TIMER0_INIT+0x6e>
 642:	42 30       	cpi	r20, 0x02	; 2
 644:	89 f0       	breq	.+34     	; 0x668 <TIMER0_INIT+0x8a>
 646:	43 30       	cpi	r20, 0x03	; 3
 648:	b1 f0       	breq	.+44     	; 0x676 <TIMER0_INIT+0x98>
 64a:	08 95       	ret
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	8f 7e       	andi	r24, 0xEF	; 239
 650:	83 bf       	out	0x33, r24	; 51
 652:	83 b7       	in	r24, 0x33	; 51
 654:	8f 7d       	andi	r24, 0xDF	; 223
 656:	83 bf       	out	0x33, r24	; 51
 658:	08 95       	ret
 65a:	83 b7       	in	r24, 0x33	; 51
 65c:	80 61       	ori	r24, 0x10	; 16
 65e:	83 bf       	out	0x33, r24	; 51
 660:	83 b7       	in	r24, 0x33	; 51
 662:	8f 7d       	andi	r24, 0xDF	; 223
 664:	83 bf       	out	0x33, r24	; 51
 666:	08 95       	ret
 668:	83 b7       	in	r24, 0x33	; 51
 66a:	8f 7e       	andi	r24, 0xEF	; 239
 66c:	83 bf       	out	0x33, r24	; 51
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	80 62       	ori	r24, 0x20	; 32
 672:	83 bf       	out	0x33, r24	; 51
 674:	08 95       	ret
 676:	83 b7       	in	r24, 0x33	; 51
 678:	80 61       	ori	r24, 0x10	; 16
 67a:	83 bf       	out	0x33, r24	; 51
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	80 62       	ori	r24, 0x20	; 32
 680:	83 bf       	out	0x33, r24	; 51
 682:	08 95       	ret

00000684 <TIMER_0_set_init_value>:
 684:	82 bf       	out	0x32, r24	; 50
 686:	08 95       	ret

00000688 <TIMER0_Stop>:
 688:	13 be       	out	0x33, r1	; 51
 68a:	08 95       	ret

0000068c <TIMER0_delay_5s>:
 68c:	81 e1       	ldi	r24, 0x11	; 17
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	0e 94 42 03 	call	0x684	; 0x684 <TIMER_0_set_init_value>
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	65 e0       	ldi	r22, 0x05	; 5
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER0_INIT>
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <TIMER0_delay_5s+0x28>
 6a4:	08 b6       	in	r0, 0x38	; 56
 6a6:	00 fe       	sbrs	r0, 0
 6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <TIMER0_delay_5s+0x18>
 6aa:	88 b7       	in	r24, 0x38	; 56
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	88 bf       	out	0x38, r24	; 56
 6b0:	2f 5f       	subi	r18, 0xFF	; 255
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	24 31       	cpi	r18, 0x14	; 20
 6b6:	31 05       	cpc	r19, r1
 6b8:	a8 f3       	brcs	.-22     	; 0x6a4 <TIMER0_delay_5s+0x18>
 6ba:	0e 94 44 03 	call	0x688	; 0x688 <TIMER0_Stop>
 6be:	08 95       	ret

000006c0 <TIMER0_delay_250ms>:
	/*i use prescaler 1024 so tick time is 1.024ms
	so number of overflows =1
	intial value 12 */
	
	
	TIMER_0_set_init_value(12);
 6c0:	8c e0       	ldi	r24, 0x0C	; 12
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 42 03 	call	0x684	; 0x684 <TIMER_0_set_init_value>
	TIMER0_INIT(TIMER0_Normal_Mode,TIMER0_Prescaler_1024,OC0_DISCONNECTED);
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	65 e0       	ldi	r22, 0x05	; 5
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER0_INIT>
	uint16 OV_counter=0;
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
	while(OV_counter < 1){
 6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <TIMER0_delay_250ms+0x26>
		while(GET_BIT(TIFR_REG,TOV0)==0);
 6d8:	08 b6       	in	r0, 0x38	; 56
 6da:	00 fe       	sbrs	r0, 0
 6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <TIMER0_delay_250ms+0x18>
		SET_BIT(TIFR_REG,TOV0);
 6de:	28 b7       	in	r18, 0x38	; 56
 6e0:	21 60       	ori	r18, 0x01	; 1
 6e2:	28 bf       	out	0x38, r18	; 56
		OV_counter++;
 6e4:	01 96       	adiw	r24, 0x01	; 1
	
	
	TIMER_0_set_init_value(12);
	TIMER0_INIT(TIMER0_Normal_Mode,TIMER0_Prescaler_1024,OC0_DISCONNECTED);
	uint16 OV_counter=0;
	while(OV_counter < 1){
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	b9 f3       	breq	.-18     	; 0x6d8 <TIMER0_delay_250ms+0x18>
		while(GET_BIT(TIFR_REG,TOV0)==0);
		SET_BIT(TIFR_REG,TOV0);
		OV_counter++;
	}
	OV_counter = 0;
	TIMER0_Stop();
 6ea:	0e 94 44 03 	call	0x688	; 0x688 <TIMER0_Stop>
 6ee:	08 95       	ret

000006f0 <_exit>:
 6f0:	f8 94       	cli

000006f2 <__stop_program>:
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <__stop_program>
